/*******************************************************************
*                                                                  *
* ME850单片机开发系统演示程序 -   频率计                           *
*                                                                  *
* LCD1602显示                                                      *
*                                                                  *
* 邮箱:  gguoqing@willar.com                                       *
* 网站： http://www.willar.com                                     *
* 作者： gguoqing                                                  *
* 时间： 2008/09/17                                                *
*                                                                  *
*【版权】Copyright(C)伟纳电子 www.willar.com  All Rights Reserved  *
*【声明】此程序仅用于学习与参考，引用请注明版权和作者信息！        *
*                                                                  *
*******************************************************************/

#include <reg52.h>
#include <intrins.h>

sbit  BEEP = P3^7;          //蜂鸣器

unsigned char code  cdis1[ ] = {"    CYMOMETER   "};
unsigned char code  cdis2[ ] = {"FREQ:        Hz "};

sbit LCD_RS = P2^0;             
sbit LCD_RW = P2^1;
sbit LCD_EN = P2^2;

bit    sec=0;
unsigned char  msec=0,Hdata=0,Ldata=0,Count=0;
unsigned long  temp=0;
unsigned char data display[] = {0x00,0x00,0x00,0x00,0x00,0x00};

char code reserve [3] _at_ 0x3b;  //保留0x3b开始的3个字节

/*********************************************************

 us延时函数   (4.34us)

*********************************************************/
void delayNOP()
{
   _nop_();_nop_();
   _nop_();_nop_();
}

/*********************************************************

 ms延时函数   

*********************************************************/
void delayms(unsigned int ms)
{
   unsigned char n;
   while(ms--)
   {
     for(n = 0; n<114; n++) ;
   }
}

/**********************************************************
*                                                         *
* 检查LCD忙状态                                           *
* lcd_busy为1时，忙，等待。                               *
* lcd-busy为0时,闲，可写指令与数据。                      *
*                                                         *
**********************************************************/ 
bit lcd_busy()
{                          
    bit result;
    LCD_RS = 0;
    LCD_RW = 1;
    LCD_EN = 1;
    delayNOP();
    result = (bit)(P0&0x80);
    LCD_EN = 0;
    return(result); 
}

/**********************************************************
*                                                         *
*写指令数据到LCD                                          *
*RS=L，RW=L，E=高脉冲，D0-D7=指令码。                     *
*                                                         *
**********************************************************/
void lcd_wcmd(unsigned char cmd)
{                          
   while(lcd_busy());
   LCD_RS = 0;
   LCD_RW = 0;
   LCD_EN = 1;
   P0 = cmd;
   delayNOP();
   LCD_EN = 0;  
}

/**********************************************************
*                                                         *
*写显示数据到LCD                                          *
*RS=H，RW=L，E=高脉冲，D0-D7=数据。                       *
*                                                         *
**********************************************************/
void lcd_wdat(unsigned char dat)
{                          
   while(lcd_busy());
   LCD_RS = 1;
   LCD_RW = 0;
   LCD_EN = 1;
   P0 = dat;
   delayNOP();
   LCD_EN = 0; 
}

/**********************************************************
*                                                         *
*  LCD初始化设定                                          *
*                                                         *
**********************************************************/
void lcd_init()
{ 
    delayms(15);   
           
    lcd_wcmd(0x38);      //16*2显示，5*7点阵，8位数据
    delayms(5);
    lcd_wcmd(0x38);         
    delayms(5);
    lcd_wcmd(0x38);         
    delayms(5);

    lcd_wcmd(0x0c);      //开显示，不显示光标  
    delayms(5);
	lcd_wcmd(0x06);      //  
    delayms(5);
    lcd_wcmd(0x01);      //清除LCD的显示内容
    delayms(5);
}

/**********************************************************
*                                                         *
*  设定显示位置                                           *
*                                                         *
**********************************************************/

void lcd_pos(unsigned char pos)
{                          
  lcd_wcmd(pos | 0x80);  //数据指针=80+地址变量
}

/**********************************************************
*                                                         *
* 显示函数                                                *
*                                                         *
**********************************************************/
void play()
{     
   unsigned char  n;
  
   for(n=0; n<=4; n++)          //数据转换
   {
      display[n]=temp%10+0x30;
      temp=temp/10;
   }
   display[5]=temp+0x30;

   for(n=5; n>0; n--)          //高位为"0"不显示
   {
     if(display[n]==0x30)
	 display[n]=0x20;
	 else
	 break;
   }

   lcd_pos(0x46);              //显示实际频率值
   for(n=5; n!=0xff; n--)
   lcd_wdat(display[n]); 
}

/*********************************************************
*                                                        *
* 主函数                                                 *
*                                                        *
*********************************************************/
void main()
{
   unsigned char  m;
   unsigned long  frq_num;

   P3=0xff;
   
   lcd_init();   
   lcd_pos(0x00);             //设置显示位置为第一行
   for(m=0;m<16;m++)
   lcd_wdat(cdis1[m]);        //显示字符 
   lcd_pos(0x40);             //设置显示位置为第二行
   for(m=0;m<16;m++)
   lcd_wdat(cdis2[m]);        //显示字符
   
   TMOD=0x51;                 //定时器0工作在定时方式
                              //定时器1工作在计数方式
   TH0=0x4c;                  //50ms定时
   TL0=0x00;                  
   TH1=0x00;                  //计数初值
   TL1=0x00;
   ET0=1;					  //使能TIMER0中断
   ET1=1;                     //使能TIMER1中断
   EA=1;                      //允许中断
   PT1=1;                     //定义TIMER1中断优先
   TR0=1;
   TR1=1;

   while(1)
   {   
	 if(sec)
	 {	    
        Hdata = TH1;            //取计数值
	    Ldata = TL1;
	    frq_num = ((Count*65535+Hdata*256+Ldata)*108/100);
	    TH1=0;
	    TL1=0;
	    sec=0;		
        Count=0;
		TR1=1;
	    TR0=1;
	 }
	 temp=frq_num;
	 play();	 
   }
}

/**********************************************************
*                                                         *
* Time0中断函数                                           *
*                                                         *
**********************************************************/
void   Time0() interrupt 1 
{
   TH0=0x4c;              //50ms定时
   TL0=0x00;
   msec++;
   if(msec==20)           //50*20=1S
   {
	 TR0=0;               //关闭TIMER0 
     TR1=0;               //关闭TIMER1 
     msec=0;
	 sec=1;               //置秒标记位
   }
}

/**********************************************************
*                                                         *
* Time1中断函数                                           *
*                                                         *
**********************************************************/
void   Time1() interrupt 3
{
   Count++;	   
}

/*********************************************************/

